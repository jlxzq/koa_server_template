#!/user/bin/env node

/**
 * 模块依赖
 */
const app = require('../app');
const http = require('http');
const config = require('../config');

/**
 * 从环境中获取端口并存储在Express中
 */
const port = normalizePort(process.env.PORT || config.port);
// app.set('port', port);

/**
 * 创建HTTP服务器
 */
const server = http.createServer(app.callback());

/**
 * 监听端口
 */
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * 将端口规范化为数字、字符串或false
 */
function normalizePort(val) {
    const port = parseInt(val, 10);
    
    if (isNaN(port)) {
        return val;
    }
    
    if (port >= 0) {
        return port;
    }
    
    return false;
}

/**
 * HTTP服务器“错误”事件的事件侦听器
 */
function onError(error){
    if(error.syscall !== 'listen'){
        throw error;
    }
    
    const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

    // 处理特定的错误
    switch(error.code){
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

function onListening() {
    const addr = server.address();
    const bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
    console.log('Listening on ' + bind);
}